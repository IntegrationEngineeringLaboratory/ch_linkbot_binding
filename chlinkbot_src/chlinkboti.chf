/*chf function of the class Linbot for Ch binding*/

#include"linkbot.h"
#include<dlfcn.h>
#include<array.h>
#include<stdio.h>
#include<stdarg.h>
#include<stdlib.h>

/* For deprecating functions in Ch*/
#define DEPRECATED(from, to) \
  fprintf(stdout, "Warning: The function \"%s()\" is deprecated. Please use \"%s()\"\n" , from, to)


/*class constructor*/
CLinkbotI::CLinkbotI(...) {
    void *fptr;
    va_list ap;
    const char* serialID;
    
    if (g_chlinkbot_dlhandle == NULL || g_chlinkbot_dlcount == 0) {
        g_chlinkbot_dlhandle = dlopen("liblinkbot.dl", RTLD_LAZY);
        if (g_chlinkbot_dlhandle == NULL) {
          printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
          return;
       }
    }
    
    va_start(ap, VA_NOARG);
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_CLinkbotI_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    
    if(va_count(ap) == 0) {
        dlrunfun(fptr, NULL, NULL);
    } else if (va_count(ap) == 1) {
        serialID = va_arg(ap, const char*);
        dlrunfun(fptr, NULL, NULL, serialID);
    }
    else {
        printf("Error, wrong number of arguments passed %d.\nExit..\n", va_count(ap));
        exit(-1);
    }
    //va_end(ap);
    g_chlinkbot_dlcount++;
    return;
}

/*class destructor*/  
CLinkbotI::~CLinkbotI() {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_dCLinkbotI_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    
    dlrunfun(fptr, NULL, NULL, this);
    g_chlinkbot_dlcount--;
    
    if (g_chlinkbot_dlcount <= 0 && g_chlinkbot_dlhandle != NULL) 
       if (dlclose(g_chlinkbot_dlhandle) != 0)
          printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
}

/*connect*/
int CLinkbotI::connect() {
    void *fptr;
    int rc;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_connect_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &rc, NULL, this);
    return rc;
}

/*connect*/
int CLinkbotI::connectWithSerialID(const char* id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_connectWithSerialID_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &rc, NULL, this, id);
    return rc;
}

/*disconnect*/
void CLinkbotI::disconnect() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_disconnect_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
        printf("Disconnected\n");
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*MOVEMENT FUNCTIONS*/

/*accelJointAngleNB*/
void CLinkbotI::accelJointAngleNB(robotJointId_t id, double acceleration,
    double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_accelJointAngleNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, acceleration, angle);
}

/*accelJointTimeNB*/
void CLinkbotI::accelJointTimeNB(robotJointId_t id, double acceleration,
    double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_accelJointTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, acceleration, time);
}

/*accelJointToVelocityNB*/
void CLinkbotI::accelJointToVelocityNB(robotJointId_t id, double acceleration,
    double speed) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_accelJointToVelocityNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, acceleration, speed);
}

/*accelJointToMaxSpeedNB*/
void CLinkbotI::accelJointToMaxSpeedNB(robotJointId_t id, double acceleration) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_accelJointToMaxSpeedNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, acceleration);
}

/*driveAccelJointTimeNB*/
void CLinkbotI::driveAccelJointTimeNB(double radius, double acceleration, double
time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAccelJointTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, radius, acceleration, time);
}

/*driveAccelToVelocityNB*/
void CLinkbotI::driveAccelToVelocityNB(double radius, double acceleration,
double velocity) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAccelToVelocityNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, radius, acceleration, velocity);
}

/*driveAccelToMaxSpeedNB*/
void CLinkbotI::driveAccelToMaxSpeedNB(double radius, double acceleration) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAccelToMaxSpeedNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, radius, acceleration);
}

/*driveAccelDistanceNB*/
void CLinkbotI::driveAccelDistanceNB(double radius, double acceleration, double
distance) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAccelDistanceNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, radius, acceleration, distance);
}

/*move*/
void CLinkbotI::move(double j1, double j2, double j3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_move_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
}

/*move NB*/
void CLinkbotI::moveNB(double j1, double j2, double j3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
}

/*moveToByTrackPos*/
void CLinkbotI::moveToByTrackPos(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveToByTrackPosNB*/
void CLinkbotI::moveToByTrackPosNB(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveJointToByTrackPos*/
void CLinkbotI::moveJointToByTrackPos(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointToByTrackPosNB*/
void CLinkbotI::moveJointToByTrackPosNB(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*driveBackward*/
void CLinkbotI::driveBackward(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveBackward_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveBackwardNB*/
void CLinkbotI::driveBackwardNB(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveBackwardNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveForward*/
void CLinkbotI::driveForward(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveForward_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveForwardNB*/
void CLinkbotI::driveForwardNB(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveForwardNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveAngle*/
void CLinkbotI::driveAngle(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAngle_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveAngleNB*/
void CLinkbotI::driveAngleNB(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAngleNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveDistance*/
void CLinkbotI::driveDistance(double distance, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveDistance_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, distance, radius);
}

/*driveDistanceNB*/
void CLinkbotI::driveDistanceNB(double distance, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveDistanceNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, distance, radius);
}

/*driveForeverNB*/
void CLinkbotI::driveForeverNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*driveTime*/
void CLinkbotI::driveTime(double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, seconds);
}

/*driveTimeNB*/
void CLinkbotI::driveTimeNB(double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, seconds);
}

/*moveWait*/
void CLinkbotI::moveWait() {
    void *fptr;
    int mask = 0x07;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveWait_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, mask);
}

/*moveJointWait*/
void CLinkbotI::moveJointWait(robotJointId_t id) {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointWait_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}

/*isMoving*/
int CLinkbotI::isMoving() {
    void *fptr;
    int mask = 0x05; // only motors 1 and 3
    int retval;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_isMoving_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &retval, NULL, this, mask);
    return retval;
}

/*isConnected*/
int CLinkbotI::isConnected() {
    void *fptr;
    int retval;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_isConnected_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

/*stop*/
void CLinkbotI::stop() {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_stop_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*stopOneJoint*/
void CLinkbotI::stopOneJoint(robotJointId_t id) {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_stopOneJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}

/*turnLeft*/
void CLinkbotI::turnLeft(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnLeft_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*turnLeftNB*/
void CLinkbotI::turnLeftNB(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnLeftNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*turnRight*/
void CLinkbotI::turnRight(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnRight_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*turnRightNB*/
void CLinkbotI::turnRightNB(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnRightNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*holdJoint*/
void CLinkbotI::holdJoint(robotJointId_t id) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_holdJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}
/*holdJoints*/
void CLinkbotI::holdJoints() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_holdJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*holdJointsAtExit*/
void CLinkbotI::holdJointsAtExit() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_holdJointsAtExit_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*relaxJoint*/
void CLinkbotI::relaxJoint(robotJointId_t id) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_relaxJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}
/*relaxJoints*/
void CLinkbotI::relaxJoints() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_relaxJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}
/*moveForever*/
void CLinkbotI::moveForeverNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}
/*moveJoint*/
void CLinkbotI::moveJoint(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointNB*/
void CLinkbotI::moveJointNB(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointForeverNB*/
void CLinkbotI::moveJointForeverNB(robotJointId_t id) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}

/*moveJointTime*/
void CLinkbotI::moveJointTime(robotJointId_t id, double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, time);
}

/*moveJointTimeNB*/
void CLinkbotI::moveJointTimeNB(robotJointId_t id, double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, time);
}

/*moveTime*/
void CLinkbotI::moveTime(double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
}

/*moveTimeNB*/
void CLinkbotI::moveTimeNB(double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
}

/*openGripper*/
void CLinkbotI::openGripper(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_openGripper_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*openGripperNB*/
void CLinkbotI::openGripperNB(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_openGripperNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*closeGripper*/
void CLinkbotI::closeGripper() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_closeGripper_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*closeGripperNB*/
void CLinkbotI::closeGripperNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_closeGripperNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*moveJointTo*/
void CLinkbotI::moveJointTo(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointToNB*/
void CLinkbotI::moveJointToNB(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveTo*/
void CLinkbotI::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveToNB*/
void CLinkbotI::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveToZero*/
void CLinkbotI::moveToZero() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveToZero_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*moveToZeroNB*/
void CLinkbotI::moveToZeroNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveToZeroNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}
/*END MOVEMENT FUNCTIONS*/
/*GET FUNCTIONS*/

/*getDistance*/
void CLinkbotI::getDistance(double &distance, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getDistance_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &distance, radius);
}

/*getBatteryVoltage*/
void CLinkbotI::getBatteryVoltage(double &voltage) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getBatteryVoltage_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &voltage);
}

/*getJointAngle*/
void CLinkbotI::getJointAngle(robotJointId_t id, double &angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointAngle_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &angle);
}

/*getJointAngles*/
void CLinkbotI::getJointAngles(double &angle1, double &angle2, double &angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointAngles_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &angle1, &angle2, &angle3);
}

/*getJointAngleInstant*/
void CLinkbotI::getJointAngleInstant(robotJointId_t id, double &angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointAngleInstant_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &angle);
}

/*getJointAnglesInstant*/
void CLinkbotI::getJointAnglesInstant(double &angle1, double &angle2, double &angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointAnglesInstant_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &angle1, &angle2, &angle3);
}
/*getJointSpeed*/
void CLinkbotI::getJointSpeed(robotJointId_t id, double &speed) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &speed);
}

/*getJointSpeed*/
void CLinkbotI::getJointSpeedRatio(robotJointId_t id, double &ratio) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointSpeedRatio_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &ratio);
}

/*getJointSpeeds*/
void CLinkbotI::getJointSpeeds(double &speed1, double &speed2, double &speed3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &speed1, &speed2, &speed3);
}


/*getJointSpeedRatios*/
void CLinkbotI::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointSpeedRatios_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &ratio1, &ratio2, &ratio3);
}

/*getAccelerometerData*/
void CLinkbotI::getAccelerometerData(double &x, double &y, double &z) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getAccelerometerData_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &x, &y, &z);
}

/*getLEDColorRGB*/
void CLinkbotI::getLEDColorRGB(int &r, int &g, int &b) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getLEDColorRGB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &r, &g, &b);
}

/*getLEDColor*/
void CLinkbotI::getLEDColor(string_t &color) {
    void *fptr;
    char color1[25];
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getLEDColor_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, color1);
    color = color1;
}

/*getJointSafetyAngle*/
void CLinkbotI::getJointSafetyAngle(double &angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointSafetyAngle_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &angle);
}

/*getJointSafetyAngleTimeout*/
void CLinkbotI::getJointSafetyAngleTimeout(double &timeout) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointSafetyAngleTimeout_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &timeout);
}

/*END GET FUNCTIONS*/
/*SET FUNCTIONS*/

/*setJointMovementStateNB*/
void CLinkbotI::setJointMovementStateNB(robotJointId_t id, robotJointState_t dir) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointMovementStateNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, dir);
}

/*setJointMovementStateTime*/
void CLinkbotI::setJointMovementStateTime(robotJointId_t id, robotJointState_t dir, double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointMovementStateTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, dir, seconds);
}
/*setJointSpeed*/
void CLinkbotI::setJointSpeed(robotJointId_t id, double speed) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, speed);
}

/*setJointSpeedRatio*/
void CLinkbotI::setJointSpeedRatio(robotJointId_t id, double ratio) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointSpeedRatio_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, ratio);
}

/*setJointSpeeds*/
void CLinkbotI::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, speed1, speed2, speed3);
}


/*setJointSpeedRatios*/
void CLinkbotI::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointSpeedRatios_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, ratio1, ratio2, ratio3);
}

/*setJointPower*/
void CLinkbotI::setJointPower(robotJointId_t id, int power) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointPower_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, power);
}

/*setMotorPowersPower*/
void CLinkbotI::setMotorPowers(double p1, double p2, double p3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setMotorPowers_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, p1, p2, p3);
}

/*setMovementStateNB*/
void CLinkbotI::setMovementStateNB(robotJointState_t dir1, robotJointState_t dir2, robotJointState_t dir3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setMovementStateNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, dir1, dir2, dir3);
}

/*setMovementStateTime*/
void CLinkbotI::setMovementStateTime(robotJointState_t dir1, robotJointState_t dir2, robotJointState_t dir3, double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setMovementStateTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, dir1, dir2, dir3, seconds);
}

/*setMovementStateTimeNB*/
void CLinkbotI::setMovementStateTimeNB(robotJointState_t dir1, robotJointState_t dir2, robotJointState_t dir3, double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setMovementStateTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, dir1, dir2, dir3, seconds);
}

/*setBuzzerFrequencyOn*/
void CLinkbotI::setBuzzerFrequencyOn(int frequency) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setBuzzerFrequencyOn_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, frequency);
}

/*setBuzzerFrequencyOff*/
void CLinkbotI::setBuzzerFrequencyOff() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setBuzzerFrequencyOff_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*setBuzzerFrequency*/
void CLinkbotI::setBuzzerFrequency(int frequency, double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setBuzzerFrequency_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, frequency, time);
}

/*setSpeed*/
void CLinkbotI::setSpeed(double speed, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, speed, radius);
}

/*setLEDColorRGB*/
void CLinkbotI::setLEDColorRGB(int r, int g, int b) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setLEDColorRGB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, r, g, b);
}

/*setLEDColor*/
void CLinkbotI::setLEDColor(char *color) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setLEDColor_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, color);
}

/*setJointSafetyAngle*/
void CLinkbotI::setJointSafetyAngle(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointSafetyAngle_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*setJointSafetyAngleTimeout*/
void CLinkbotI::setJointSafetyAngleTimeout(double timeout) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointSafetyAngleTimeout_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, timeout);
}

/*END SET FUNCTIONS*/
/*MISCELLANEOUS FUNCTIONS*/

/*enableButtonCallback*/
void CLinkbotI::enableButtonCallback(void* userdata, void (*buttonCallback)(void* data, int button, int buttonDown)) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_enableButtonCallback_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, userdata, buttonCallback);
}

/*disableButtonCallback*/
void CLinkbotI::disableButtonCallback() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_disableButtonCallback_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*delaySeconds*/
void CLinkbotI::delaySeconds(int seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_delaySeconds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, seconds);
}

/*systemTime*/
void CLinkbotI::systemTime(double &time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_systemTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &time);
}

/*resetToZeroNB*/
void CLinkbotI::resetToZeroNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_resetToZeroNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}


/*resetToZero*/
void CLinkbotI::resetToZero() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_resetToZero_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*recordAngleBegin*/
void CLinkbotI::recordAngleBegin(int id, double* &time, double* &angle, double seconds) {
    void *fptr;
    va_list ap;
    int shiftData = 1;
    int mask;
    va_start(ap, seconds);

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_recordAngleBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    
    dlrunfun(fptr, NULL, NULL, this, id, &time, &angle, seconds, shiftData);
    
    va_end(ap);
}
/*recordAngleEnd*/
void CLinkbotI::recordAngleEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_recordAngleEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this, id, &num);
}

/*recordAnglesBegin*/
void CLinkbotI::recordAnglesBegin(double* &time, double* &angle1, double* &angle3, double seconds) {
    void *fptr;
    va_list ap;
    int shiftData = 1;
    int mask;
    va_start(ap, seconds);

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_recordAnglesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    
    dlrunfun(fptr, NULL, NULL, this, &time, &angle1, &angle3, seconds, shiftData);
    
    va_end(ap);
}
/*recordAnglesEnd*/
void CLinkbotI::recordAnglesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_recordAnglesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this, &num);
}

/*recordDistanceBegin*/
void CLinkbotI::recordDistanceBegin(double* &time, double* &distance, double radius, double seconds) {
    void *fptr;
    va_list ap, ap1;
    int shiftData = 1;
    int id = 1;
    
    va_start(ap, seconds);

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_recordDistanceBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    
    dlrunfun(fptr, NULL, NULL, this, id, &time, &distance, radius, seconds, shiftData);
    
    va_end(ap);
}
/*recordDistanceEnd*/
void CLinkbotI::recordDistanceEnd(int &num) {
    void *fptr;
    int id = 1;

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_recordDistanceEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this, id, &num);
}

/*enableRecordDataShift*/
void CLinkbotI::enableRecordDataShift() {
    
    DEPRECATED("enableRecordDataShift", "recordDataShift");
  
}

void CLinkbotI::recordDataShift() {
    void *fptr;
    
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_enableRecordDataShift_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this);
}

/*disableRecordDataShift*/
void CLinkbotI::disableRecordDataShift() {
    void *fptr;

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_disableRecordDataShift_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this);
}

/*recordNoDataShift*/
void CLinkbotI::recordNoDataShift() {
    void *fptr;

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_recordNoDataShift_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this);
}

/*recordDistanceOffset*/
void CLinkbotI::recordDistanceOffset(double distance) {
    void *fptr;

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_recordDistanceOffset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this, distance);
}

/*blinkLED*/
void CLinkbotI::blinkLED(double delay, int numBlinks) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_blinkLED_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, delay, numBlinks);
}

/*CLinkbotIGroup class */

/* Constructor */
CLinkbotIGroup::CLinkbotIGroup() {
    void *fptr;
    /* Here to load the dynamically loaded library if necessary.
     CLinkbotI::g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     CLinkbotI::g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
    
    if(CLinkbotI::g_chlinkbot_dlhandle == NULL || CLinkbotI::g_chlinkbot_dlcount == 0) {
        CLinkbotI::g_chlinkbot_dlhandle = dlopen("liblinkbot.dl", RTLD_LAZY);
        if(CLinkbotI::g_chlinkbot_dlhandle == NULL) {
          printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
          return;
        }
    }
    /* to get the address by function name */
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_CLinkbotIGroup_chdl");
    if(fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    /* to call the chdl function in dynamically loaded
     library by address */
     dlrunfun(fptr, NULL, NULL);
    CLinkbotI::g_chlinkbot_dlcount++; // to increase count of instance
}

/* Destructor */
CLinkbotIGroup::~CLinkbotIGroup() {
  void *fptr;
  fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_dCLinkbotIGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  CLinkbotI::g_chlinkbot_dlcount--; // to decrease count of instance
  if(CLinkbotI::g_chlinkbot_dlcount <= 0 && CLinkbotI::g_chlinkbot_dlhandle != NULL) {
    if(dlclose(CLinkbotI::g_chlinkbot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

/* addRobot*/
void CLinkbotIGroup::addRobot(CLinkbotI &robot) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_addRobot_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &robot);
    return;
}

/* addRobots*/
void CLinkbotIGroup::addRobots(array CLinkbotI robots[], ...) {
    void *fptr;
    int rc;
    int numRobots;
    va_list ap;
    va_start(ap,robots);
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_addRobots_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    
    if(va_count(ap) == 1) {
      numRobots = va_arg(ap, int);
    } else {
      numRobots = (int)shape(robots);
    }
     
    dlrunfun(fptr, NULL, NULL, this, robots, numRobots);
    va_end(ap);
    return;
}

/* connect*/
void CLinkbotIGroup::connect() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_connect_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* driveDistanceNB*/
void CLinkbotIGroup::driveDistanceNB(double distance, double radius) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveDistanceNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, distance, radius);
    return;
}
/* driveDistance*/
void CLinkbotIGroup::driveDistance(double distance, double radius) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveDistance_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, distance, radius);
    return;
}

/* driveBackwardNB*/
void CLinkbotIGroup::driveBackwardNB(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveBackwardNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveBackward*/
void CLinkbotIGroup::driveBackward(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveBackward_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveForwardNB*/
void CLinkbotIGroup::driveForwardNB(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveForwardNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveForward*/
void CLinkbotIGroup::driveForward(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveForward_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveAngle*/
void CLinkbotIGroup::driveAngle(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveAngle_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveAngleNB*/
void CLinkbotIGroup::driveAngleNB(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveAngleNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveTimeNB*/
void CLinkbotIGroup::driveTimeNB(double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
    return;
}

/* driveTime*/
void CLinkbotIGroup::driveTime(double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
    return;
}

/* driveForeverNB*/
void CLinkbotIGroup::driveForeverNB() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveWait*/
void CLinkbotIGroup::moveWait() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveWait_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveJointWait*/
void CLinkbotIGroup::moveJointWait(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveWait_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* holdJoint*/
void CLinkbotIGroup::holdJoint(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_holdJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* holdJoints*/
void CLinkbotIGroup::holdJoints() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_holdJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}
/* holdJointsAtExit*/
void CLinkbotIGroup::holdJointsAtExit() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_holdJointsAtExit_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* turnLeftNB*/
void CLinkbotIGroup::turnLeftNB(double angle, double radius, double tracklength) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_turnLeftNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
    return;
}

/* turnLeft*/
void CLinkbotIGroup::turnLeft(double angle, double radius, double tracklength) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_turnLeft_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
    return;
}

/* turnRightNB*/
void CLinkbotIGroup::turnRightNB(double angle, double radius, double tracklength) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_turnRightNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
    return;
}

/* turnRight*/
void CLinkbotIGroup::turnRight(double angle, double radius, double tracklength) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_turnRight_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
    return;
}

/* relaxJoint*/
void CLinkbotIGroup::relaxJoint(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_relaxJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* relaxJoints*/
void CLinkbotIGroup::relaxJoints() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_relaxJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}


/* stop*/
void CLinkbotIGroup::stop() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_stop_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveNB*/
void CLinkbotIGroup::moveNB(double j1, double j2, double j3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
    return;
}

/* move*/
void CLinkbotIGroup::move(double j1, double j2, double j3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_move_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
    return;
}


/* moveForeverNB*/
void CLinkbotIGroup::moveForeverNB() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveToNB*/
void CLinkbotIGroup::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveTo*/
void CLinkbotIGroup::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveToZeroNB*/
void CLinkbotIGroup::moveToZeroNB() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveToZeroNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveToZero*/
void CLinkbotIGroup::moveToZero() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveToZero_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveToByTrackPosNB*/
void CLinkbotIGroup::moveToByTrackPosNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveToByTrackPos*/
void CLinkbotIGroup::moveToByTrackPos(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveJointNB*/
void CLinkbotIGroup::moveJointNB(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveJointNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJoint*/
void CLinkbotIGroup::moveJoint(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointForeverNB*/
void CLinkbotIGroup::moveJointForeverNB(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveJointForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* moveJointToNB*/
void CLinkbotIGroup::moveJointToNB(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveJointToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointTo*/
void CLinkbotIGroup::moveJointTo(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveJointTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointToByTrackPosNB*/
void CLinkbotIGroup::moveJointToByTrackPosNB(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveJointToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointToByTrackPos*/
void CLinkbotIGroup::moveJointToByTrackPos(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveJointToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* openGripperNB*/
void CLinkbotIGroup::openGripperNB(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_openGripperNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* openGripper*/
void CLinkbotIGroup::openGripper(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_openGripper_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* setJointSpeed*/
void CLinkbotIGroup::setJointSpeed(robotJointId_t id, double speed) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_setJointSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, speed);
    return;
}

/* setJointSpeedRatio*/
void CLinkbotIGroup::setJointSpeedRatio(robotJointId_t id, double ratio) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_setJointSpeedRatio_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, ratio);
    return;
}

/* setJointSpeeds*/
void CLinkbotIGroup::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_setJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, speed1, speed2, speed3);
    return;
}

/* setJointSpeedRatios*/
void CLinkbotIGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_setJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, ratio1, ratio2, ratio3);
    return;
}

/* setSpeed*/
void CLinkbotIGroup::setSpeed(double speed, double radius) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_setSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, speed, radius);
    return;
}

/* setLEDColorRGB*/
void CLinkbotIGroup::setLEDColorRGB(int r, int g, int b) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_setLEDColorRGB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, r, g, b);
    return;
}

/* setLEDColor*/
void CLinkbotIGroup::setLEDColor(char* color) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_setLEDColor_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, color);
    return;
}

/* resetToZeroNB*/
void CLinkbotIGroup::resetToZeroNB() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_resetToZeroNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* resetToZero*/
void CLinkbotIGroup::resetToZero() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_resetToZero_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/*isMoving*/
int CLinkbotIGroup::isMoving() {
    void *fptr;
    int mask = 0x05; // only motors 1 and 3
    int retval;
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_isMoving_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &retval, NULL, this, mask);
    return retval;
}

/*isConnected*/
int CLinkbotIGroup::isConnected() {
    void *fptr;
    int retval;
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_isConnected_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

/*closeGripperNB*/
void CLinkbotIGroup::closeGripperNB() {
    void *fptr;

    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_closeGripperNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/*closeGripper*/
void CLinkbotIGroup::closeGripper() {
    void *fptr;

    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_closeGripper_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveJointTime*/
void CLinkbotIGroup::moveJointTime(robotJointId_t id, double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveJointTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, time);
    return;
}

/* moveJointTimeNB*/
void CLinkbotIGroup::moveJointTimeNB(robotJointId_t id, double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveJointTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, time);
    return;
}

/* moveTime*/
void CLinkbotIGroup::moveTime(double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
    return;
}

/* moveTimeNB*/
void CLinkbotIGroup::moveTimeNB(double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_moveTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
    return;
}
