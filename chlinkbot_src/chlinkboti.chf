/*chf function of the class Linbot for Ch binding*/

#include"linkbot.h"
#include<dlfcn.h>
#include<stdarg.h>
#include<array.h>

/*class constructor*/
CLinkbotI::CLinkbotI() {
    void *fptr;
    if (g_chlinkbot_dlhandle == NULL || g_chlinkbot_dlcount == 0) {
        g_chlinkbot_dlhandle = dlopen("liblinkbot.dl", RTLD_LAZY);
        if (g_chlinkbot_dlhandle == NULL) {
          printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
          return;
       }
    }
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_CLinkbotI_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL);
    g_chlinkbot_dlcount++;
}

/*class destructor*/  
CLinkbotI::~CLinkbotI() {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_dCLinkbotI_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    g_chlinkbot_dlcount--;
    
    if (g_chlinkbot_dlcount <= 0 && g_chlinkbot_dlhandle != NULL) 
       if (dlclose(g_chlinkbot_dlhandle) != 0)
          printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
}

/*connect*/
int CLinkbotI::connect(const char* id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_connect_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &rc, NULL, this, id);
    return rc;
}

/*disconnect*/
void CLinkbotI::disconnect() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_disconnect_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
        printf("Disconnected\n");
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*MOVEMENT FUNCTIONS/*
/*move*/
void CLinkbotI::move(double j1, double j2, double j3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_move_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
}

/*move NB*/
void CLinkbotI::moveNB(double j1, double j2, double j3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
}

/*moveToByTrackPos*/
void CLinkbotI::moveToByTrackPos(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveToByTrackPosNB*/
void CLinkbotI::moveToByTrackPosNB(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveJointToByTrackPos*/
void CLinkbotI::moveJointToByTrackPos(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointToByTrackPosNB*/
void CLinkbotI::moveJointToByTrackPosNB(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*driveBackward*/
void CLinkbotI::driveBackward(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveBackward_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveBackwardNB*/
void CLinkbotI::driveBackwardNB(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveBackwardNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveForward*/
void CLinkbotI::driveForward(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveForward_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveForwardNB*/
void CLinkbotI::driveForwardNB(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveForwardNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveDistance*/
void CLinkbotI::driveDistance(double distance, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveDistance_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, distance, radius);
}

/*driveDistanceNB*/
void CLinkbotI::driveDistanceNB(double distance, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveDistanceNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, distance, radius);
}

/*driveForeverNB*/
void CLinkbotI::driveForeverNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*driveTime*/
void CLinkbotI::driveTime(double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, seconds);
}

/*moveWait*/
void CLinkbotI::moveWait() {
    void *fptr;
    int mask = 0x07;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveWait_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, mask);
}

/*stop*/
void CLinkbotI::stop() {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_stop_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*stopOneJoint*/
void CLinkbotI::stopOneJoint(robotJointId_t id) {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_stopOneJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}

/*turnLeft*/
void CLinkbotI::turnLeft(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnLeft_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*turnLeftNB*/
void CLinkbotI::turnLeftNB(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnLeftNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*turnRight*/
void CLinkbotI::turnRight(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnRight_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*turnRightNB*/
void CLinkbotI::turnRightNB(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnRightNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*holdJoint*/
void CLinkbotI::holdJoint(robotJointId_t id) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_holdJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}
/*holdJoints*/
void CLinkbotI::holdJoints() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_holdJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*relaxJoint*/
void CLinkbotI::relaxJoint(robotJointId_t id) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_relaxJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}
/*relaxJoints*/
void CLinkbotI::relaxJoints() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_relaxJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}
/*moveForever*/
void CLinkbotI::moveForeverNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}
/*moveJoint*/
void CLinkbotI::moveJoint(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointNB*/
void CLinkbotI::moveJointNB(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointForeverNB*/
void CLinkbotI::moveJointForeverNB(robotJointId_t id) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}

/*moveJointTime*/
void CLinkbotI::moveJointTime(robotJointId_t id, double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, time);
}

/*moveTime*/
void CLinkbotI::moveTime(double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
}

/*openGripper*/
void CLinkbotI::openGripper(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_openGripper_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*closeGripper*/
void CLinkbotI::closeGripper() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_closeGripper_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*moveJointTo*/
void CLinkbotI::moveJointTo(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointToNB*/
void CLinkbotI::moveJointToNB(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveJointToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveTo*/
void CLinkbotI::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveToNB*/
void CLinkbotI::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveToZero*/
void CLinkbotI::moveToZero() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveToZero_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*moveToZeroNB*/
void CLinkbotI::moveToZeroNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_moveToZeroNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}
/*END MOVEMENT FUNCTIONS*/
/*GET FUNCTIONS*/

/*getDistance*/
void CLinkbotI::getDistance(double &distance, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getDistance_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &distance, radius);
}

/*getJointAngle*/
void CLinkbotI::getJointAngle(robotJointId_t id, double &angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointAngle_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &angle);
}

/*getJointAngles*/
void CLinkbotI::getJointAngles(double &angle1, double &angle2, double &angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointAngles_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &angle1, &angle2, &angle3);
}

/*getJointAngleInstant*/
void CLinkbotI::getJointAngleInstant(robotJointId_t id, double &angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointAngleInstant_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &angle);
}

/*getJointAnglesInstant*/
void CLinkbotI::getJointAnglesInstant(double &angle1, double &angle2, double &angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointAnglesInstant_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &angle1, &angle2, &angle3);
}
/*getJointSpeed*/
void CLinkbotI::getJointSpeed(robotJointId_t id, double &speed) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &speed);
}

/*getJointSpeed*/
void CLinkbotI::getJointSpeedRatio(robotJointId_t id, double &ratio) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointSpeedRatio_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &ratio);
}

/*getJointSpeeds*/
void CLinkbotI::getJointSpeeds(double &speed1, double &speed2, double &speed3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &speed1, &speed2, &speed3);
}


/*getJointSpeedRatios*/
void CLinkbotI::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getJointSpeedRatios_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &ratio1, &ratio2, &ratio3);
}

/*getAccelerometerData*/
void CLinkbotI::getAccelerometerData(double &x, double &y, double &z) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getAccelerometerData_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &x, &y, &z);
}

/*getLEDColorRGB*/
void CLinkbotI::getLEDColorRGB(int &r, int &g, int &b) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getLEDColorRGB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &r, &g, &b);
}

/*getLEDColor*/
void CLinkbotI::getLEDColor(string_t &color) {
    void *fptr;
    char color1[25];
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getLEDColor_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, color1);
    color = color1;
}

/*END GET FUNCTIONS*/
/*SET FUNCTIONS*/

/*setJointMovementStateNB*/
void CLinkbotI::setJointMovementStateNB(robotJointId_t id, robotJointState_t dir) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointMovementStateNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, dir);
}

/*setJointMovementStateTime*/
void CLinkbotI::setJointMovementStateTime(robotJointId_t id, robotJointState_t dir, double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointMovementStateTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, dir, seconds);
}
/*setJointSpeed*/
void CLinkbotI::setJointSpeed(robotJointId_t id, double speed) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, speed);
}

/*setJointSpeedRatio*/
void CLinkbotI::setJointSpeedRatio(robotJointId_t id, double ratio) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointSpeedRatio_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, ratio);
}

/*setJointSpeeds*/
void CLinkbotI::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, speed1, speed2, speed3);
}


/*setJointSpeedRatios*/
void CLinkbotI::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointSpeedRatios_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, ratio1, ratio2, ratio3);
}

/*setJointPower*/
void CLinkbotI::setJointPower(robotJointId_t id, int power) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setJointPower_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, power);
}

/*setMotorPowersPower*/
void CLinkbotI::setMotorPowers(double p1, double p2, double p3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setMotorPowers_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, p1, p2, p3);
}

/*setMovementStateNB*/
void CLinkbotI::setMovementStateNB(robotJointState_t dir1, robotJointState_t dir2, robotJointState_t dir3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setMovementStateNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, dir1, dir2, dir3);
}

/*setMovementStateTime*/
void CLinkbotI::setMovementStateTime(robotJointState_t dir1, robotJointState_t dir2, robotJointState_t dir3, double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setMovementStateTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, dir1, dir2, dir3, seconds);
}

/*setMovementStateTimeNB*/
void CLinkbotI::setMovementStateTimeNB(robotJointState_t dir1, robotJointState_t dir2, robotJointState_t dir3, double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setMovementStateTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, dir1, dir2, dir3, seconds);
}

/*setBuzzerFrequencyOn*/
void CLinkbotI::setBuzzerFrequencyOn(int frequency) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setBuzzerFrequencyOn_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, frequency);
}

/*setBuzzerFrequencyOff*/
void CLinkbotI::setBuzzerFrequencyOff() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setBuzzerFrequencyOff_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*setBuzzerFrequency*/
void CLinkbotI::setBuzzerFrequency(int frequency, double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setBuzzerFrequency_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, frequency, time);
}

/*setSpeed*/
void CLinkbotI::setSpeed(double speed, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, speed, radius);
}

/*setLEDColorRGB*/
void CLinkbotI::setLEDColorRGB(int r, int g, int b) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setLEDColorRGB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, r, g, b);
}

/*setLEDColor*/
void CLinkbotI::setLEDColor(char *color) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setLEDColor_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, color);
}

/*END SET FUNCTIONS*/
/*MISCELLANEOUS FUNCTIONS*/

/*enableButtonCallback*/
void CLinkbotI::enableButtonCallback(void* userdata, void (*buttonCallback)(void* data, int button, int buttonDown)) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_enableButtonCallback_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, userdata, buttonCallback);
}

/*disableButtonCallback*/
void CLinkbotI::disableButtonCallback() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_disableButtonCallback_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*delaySeconds*/
void CLinkbotI::delaySeconds(int seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_delaySeconds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, seconds);
}

/*systemTime*/
void CLinkbotI::systemTime(double &time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_systemTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &time);
}
