/*chf function of the class Linbot for Ch binding*/

#include"linkbot.h"
#include<dlfcn.h>
#include<stdarg.h>
#include<array.h>

/* For deprecating functions in Ch*/
#define DEPRECATED(from, to) \
  fprintf(stdout, "Warning: The function \"%s()\" is deprecated. Please use \"%s()\"\n" , from, to)

/*class constructor*/
CLinkbotL::CLinkbotL(...) {
    void *fptr;
    va_list ap;
    const char* serialID;
    if (g_chlinkbot_dlhandle == NULL || g_chlinkbot_dlcount == 0) {
        g_chlinkbot_dlhandle = dlopen("liblinkbot.dl", RTLD_LAZY);
        if (g_chlinkbot_dlhandle == NULL) {
          printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
          return;
       }
    }
    
    va_start(ap, VA_NOARG);
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_CLinkbotL_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    if(va_count(ap) == 0) {
        dlrunfun(fptr, NULL, NULL);
    } else if (va_count(ap) == 1) {
        serialID = va_arg(ap, const char*);
        dlrunfun(fptr, NULL, NULL, serialID);
    }
    else {
        printf("Error, wrong number of arguments passed %d.\nExit..\n", va_count(ap));
        exit(-1);
    }
    //va_end(ap);
    g_chlinkbot_dlcount++;
    return;
}

/*class destructor*/  
CLinkbotL::~CLinkbotL() {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_dCLinkbotL_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    g_chlinkbot_dlcount--;
    
    if (g_chlinkbot_dlcount <= 0 && g_chlinkbot_dlhandle != NULL) 
       if (dlclose(g_chlinkbot_dlhandle) != 0)
          printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
}

/*connect*/
int CLinkbotL::connect() {
    void *fptr;
    int rc;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_connect_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &rc, NULL, this);
    return rc;
}

/*connectWithSerialID*/
int CLinkbotL::connectWithSerialID(const char* id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_connectWithSerialID_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &rc, NULL, this, id);
    return rc;
}


/*disconnect*/
void CLinkbotL::disconnect() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_disconnect_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
        printf("Disconnected\n");
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*MOVEMENT FUNCTIONS/*
/*move*/
void CLinkbotL::move(double j1, double j2, double j3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_move_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
}

/*move NB*/
void CLinkbotL::moveNB(double j1, double j2, double j3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
}

/*moveToByTrackPos*/
void CLinkbotL::moveToByTrackPos(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveToByTrackPosNB*/
void CLinkbotL::moveToByTrackPosNB(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveJointToByTrackPos*/
void CLinkbotL::moveJointToByTrackPos(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveJointToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointToByTrackPosNB*/
void CLinkbotL::moveJointToByTrackPosNB(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveJointToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveWait*/
void CLinkbotL::moveWait() {
    void *fptr;
    int mask = 0x07;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveWait_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, mask);
}

/*moveJointWait*/
void CLinkbotL::moveJointWait(robotJointId_t id) {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveJointWait_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}

/*stop*/
void CLinkbotL::stop() {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_stop_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*stopOneJoint*/
void CLinkbotL::stopOneJoint(robotJointId_t id) {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_stopOneJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}

/*holdJoint*/
void CLinkbotL::holdJoint(robotJointId_t id) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_holdJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}
/*holdJoints*/
void CLinkbotL::holdJoints() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_holdJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*holdJointsAtExit*/
void CLinkbotL::holdJointsAtExit() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_holdJointsAtExit_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*isMoving*/
int CLinkbotL::isMoving() {
    void *fptr;
    int mask = 0x03; // only motors 1 and 2
    int retval;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_isMoving_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &retval, NULL, this, mask);
    return retval;
}

/*isConnected*/
int CLinkbotL::isConnected() {
    void *fptr;
    int retval;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_isConnected_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

/*relaxJoint*/
void CLinkbotL::relaxJoint(robotJointId_t id) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_relaxJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}
/*relaxJoints*/
void CLinkbotL::relaxJoints() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_relaxJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}
/*moveForever*/
void CLinkbotL::moveForeverNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}
/*moveJoint*/
void CLinkbotL::moveJoint(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointNB*/
void CLinkbotL::moveJointNB(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveJointNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointForeverNB*/
void CLinkbotL::moveJointForeverNB(robotJointId_t id) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveJointForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
}

/*moveJointTime*/
void CLinkbotL::moveJointTime(robotJointId_t id, double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveJointTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, time);
}

/*moveJointTimeNB*/
void CLinkbotL::moveJointTimeNB(robotJointId_t id, double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveJointTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, time);
}

/*moveTime*/
void CLinkbotL::moveTime(double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
}

/*moveTimeNB*/
void CLinkbotL::moveTimeNB(double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
}

/*moveJointTo*/
void CLinkbotL::moveJointTo(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveJointTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveJointToNB*/
void CLinkbotL::moveJointToNB(robotJointId_t id, double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveJointToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
}

/*moveTo*/
void CLinkbotL::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveToNB*/
void CLinkbotL::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
}

/*moveToZero*/
void CLinkbotL::moveToZero() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveToZero_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*moveToZeroNB*/
void CLinkbotL::moveToZeroNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_moveToZeroNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}
/*END MOVEMENT FUNCTIONS*/
/*GET FUNCTIONS*/

/*getJointAngle*/
void CLinkbotL::getJointAngle(robotJointId_t id, double &angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getJointAngle_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &angle);
}


/*getJointAngles*/
void CLinkbotL::getJointAngles(double &angle1, double &angle2, double &angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getJointAngles_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &angle1, &angle2, &angle3);
}

/*getJointAngleInstant*/
void CLinkbotL::getJointAngleInstant(robotJointId_t id, double &angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getJointAngleInstant_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &angle);
}

/*getJointAnglesInstant*/
void CLinkbotL::getJointAnglesInstant(double &angle1, double &angle2, double &angle3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getJointAnglesInstant_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &angle1, &angle2, &angle3);
}

/*getBatteryVoltage*/
void CLinkbotL::getBatteryVoltage(double &voltage) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getBatteryVoltage_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &voltage);
}

/*getJointSpeed*/
void CLinkbotL::getJointSpeed(robotJointId_t id, double &speed) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getJointSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &speed);
}

/*getJointSpeed*/
void CLinkbotL::getJointSpeedRatio(robotJointId_t id, double &ratio) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getJointSpeedRatio_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, &ratio);
}

/*getJointSpeeds*/
void CLinkbotL::getJointSpeeds(double &speed1, double &speed2, double &speed3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &speed1, &speed2, &speed3);
}


/*getJointSpeedRatios*/
void CLinkbotL::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getJointSpeedRatios_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &ratio1, &ratio2, &ratio3);
}

/*getAccelerometerData*/
void CLinkbotL::getAccelerometerData(double &x, double &y, double &z) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getAccelerometerData_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &x, &y, &z);
}

/*getLEDColorRGB*/
void CLinkbotL::getLEDColorRGB(int &r, int &g, int &b) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getLEDColorRGB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &r, &g, &b);
}

/*getLEDColor*/
void CLinkbotL::getLEDColor(string_t &color) {
    void *fptr;
    char color1[25];
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getLEDColor_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, color1);
    color = color1;
}

/*getJointSafetyAngle*/
void CLinkbotL::getJointSafetyAngle(double &angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getJointSafetyAngle_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &angle);
}

/*getJointSafetyAngleTimeout*/
void CLinkbotL::getJointSafetyAngleTimeout(double &timeout) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_getJointSafetyAngleTimeout_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &timeout);
}

/*END GET FUNCTIONS*/
/*SET FUNCTIONS*/

/*setJointMovementStateNB*/
void CLinkbotL::setJointMovementStateNB(robotJointId_t id, robotJointState_t dir) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setJointMovementStateNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, dir);
}

/*setJointMovementStateTime*/
void CLinkbotL::setJointMovementStateTime(robotJointId_t id, robotJointState_t dir, double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setJointMovementStateTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, dir, seconds);
}
/*setJointSpeed*/
void CLinkbotL::setJointSpeed(robotJointId_t id, double speed) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setJointSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, speed);
}

/*setJointSpeedRatio*/
void CLinkbotL::setJointSpeedRatio(robotJointId_t id, double ratio) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setJointSpeedRatio_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, ratio);
}

/*setJointSpeeds*/
void CLinkbotL::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, speed1, speed2, speed3);
}


/*setJointSpeedRatios*/
void CLinkbotL::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setJointSpeedRatios_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, ratio1, ratio2, ratio3);
}

/*setJointPower*/
void CLinkbotL::setJointPower(robotJointId_t id, int power) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setJointPower_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, power);
}

/*setMotorPowersPower*/
void CLinkbotL::setMotorPowers(double p1, double p2, double p3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setMotorPowers_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, p1, p2, p3);
}

/*setMovementStateNB*/
void CLinkbotL::setMovementStateNB(robotJointState_t dir1, robotJointState_t dir2, robotJointState_t dir3) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setMovementStateNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, dir1, dir2, dir3);
}

/*setMovementStateTime*/
void CLinkbotL::setMovementStateTime(robotJointState_t dir1, robotJointState_t dir2, robotJointState_t dir3, double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setMovementStateTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, dir1, dir2, dir3, seconds);
}

/*setMovementStateTimeNB*/
void CLinkbotL::setMovementStateTimeNB(robotJointState_t dir1, robotJointState_t dir2, robotJointState_t dir3, double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setMovementStateTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, dir1, dir2, dir3, seconds);
}

/*setBuzzerFrequencyOn*/
void CLinkbotL::setBuzzerFrequencyOn(int frequency) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setBuzzerFrequencyOn_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, frequency);
}

/*setBuzzerFrequencyOff*/
void CLinkbotL::setBuzzerFrequencyOff() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setBuzzerFrequencyOff_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*setBuzzerFrequency*/
void CLinkbotL::setBuzzerFrequency(int frequency, double time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setBuzzerFrequency_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, frequency, time);
}

/*setLEDColorRGB*/
void CLinkbotL::setLEDColorRGB(int r, int g, int b) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setLEDColorRGB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, r, g, b);
}

/*setLEDColor*/
void CLinkbotL::setLEDColor(char *color) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setLEDColor_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, color);
}

/*setJointSafetyAngle*/
void CLinkbotL::setJointSafetyAngle(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setJointSafetyAngle_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*setJointSafetyAngleTimeout*/
void CLinkbotL::setJointSafetyAngleTimeout(double timeout) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_setJointSafetyAngleTimeout_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, timeout);
}

/*END SET FUNCTIONS*/
/*MISCELLANEOUS FUNCTIONS*/

/*enableButtonCallback*/
void CLinkbotL::enableButtonCallback(void* userdata, void (*buttonCallback)(void* data, int button, int buttonDown)) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_enableButtonCallback_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, userdata, buttonCallback);
}

/*disableButtonCallback*/
void CLinkbotL::disableButtonCallback() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_disableButtonCallback_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*delaySeconds*/
void CLinkbotL::delaySeconds(int seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_delaySeconds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, seconds);
}

/*systemTime*/
void CLinkbotL::systemTime(double &time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_systemTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &time);
}

/*resetToZeroNB*/
void CLinkbotL::resetToZeroNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_resetToZeroNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*resetToZero*/
void CLinkbotL::resetToZero() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_resetToZero_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*recordAngleBegin*/
void CLinkbotL::recordAngleBegin(int id, double* &time, double* &angle, double seconds) {
    void *fptr;
    va_list ap;
    int shiftData = 1;
    int mask;
    va_start(ap, seconds);

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_recordAngleBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    
    dlrunfun(fptr, NULL, NULL, this, id, &time, &angle, seconds, shiftData);
    
    va_end(ap);
}
/*recordAngleEnd*/
void CLinkbotL::recordAngleEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_recordAngleEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this, id, &num);
}

/*enableRecordDataShift*/
void CLinkbotL::enableRecordDataShift() {
   DEPRECATED("enableRecordDataShift", "recordDataShift");
}

/*recordDataShift*/
void CLinkbotL::recordDataShift() {
     void *fptr;
    
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_enableRecordDataShift_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this);
}

/*disableRecordDataShift*/
void CLinkbotL::disableRecordDataShift() {
    void *fptr;

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_disableRecordDataShift_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this);
}

/*recordNoDataShift*/
void CLinkbotL::recordNoDataShift() {
    void *fptr;

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_recordNoDataShift_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this);
}

/*blinkLED*/
void CLinkbotL::blinkLED(double delay, int numBlinks) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_blinkLED_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, delay, numBlinks);
}

/*CLinkbotLGroup class */

/* Constructor */
CLinkbotLGroup::CLinkbotLGroup() {
    void *fptr;
    /* Here to load the dynamically loaded library if necessary.
     CLinkbotL::g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     CLinkbotL::g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
    
    if(CLinkbotL::g_chlinkbot_dlhandle == NULL || CLinkbotL::g_chlinkbot_dlcount == 0) {
        CLinkbotL::g_chlinkbot_dlhandle = dlopen("liblinkbot.dl", RTLD_LAZY);
        if(CLinkbotL::g_chlinkbot_dlhandle == NULL) {
          printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
          return;
        }
    }
    /* to get the address by function name */
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_CLinkbotLGroup_chdl");
    if(fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    /* to call the chdl function in dynamically loaded
     library by address */
     dlrunfun(fptr, NULL, NULL);
    CLinkbotL::g_chlinkbot_dlcount++; // to increase count of instance
}

/* Destructor */
CLinkbotLGroup::~CLinkbotLGroup() {
  void *fptr;
  fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_dCLinkbotLGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  CLinkbotL::g_chlinkbot_dlcount--; // to decrease count of instance
  if(CLinkbotL::g_chlinkbot_dlcount <= 0 && CLinkbotL::g_chlinkbot_dlhandle != NULL) {
    if(dlclose(CLinkbotL::g_chlinkbot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

/* addRobot*/
void CLinkbotLGroup::addRobot(CLinkbotL &robot) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_addRobot_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &robot);
    return;
}

/* connect*/
void CLinkbotLGroup::connect() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_connect_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveWait*/
void CLinkbotLGroup::moveWait() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveWait_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveJointWait*/
void CLinkbotLGroup::moveJointWait(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveWait_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* holdJoint*/
void CLinkbotLGroup::holdJoint(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_holdJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* holdJoints*/
void CLinkbotLGroup::holdJoints() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_holdJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}


/* holdJointsAtExit*/
void CLinkbotLGroup::holdJointsAtExit() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_holdJointsAtExit_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* relaxJoint*/
void CLinkbotLGroup::relaxJoint(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_relaxJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* relaxJoints*/
void CLinkbotLGroup::relaxJoints() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_relaxJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* stop*/
void CLinkbotLGroup::stop() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_stop_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveNB*/
void CLinkbotLGroup::moveNB(double j1, double j2, double j3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
    return;
}

/* move*/
void CLinkbotLGroup::move(double j1, double j2, double j3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_move_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
    return;
}

/* moveForeverNB*/
void CLinkbotLGroup::moveForeverNB() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveToNB*/
void CLinkbotLGroup::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveTo*/
void CLinkbotLGroup::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveToZeroNB*/
void CLinkbotLGroup::moveToZeroNB() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveToZeroNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveToZero*/
void CLinkbotLGroup::moveToZero() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveToZero_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveToByTrackPosNB*/
void CLinkbotLGroup::moveToByTrackPosNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveToByTrackPos*/
void CLinkbotLGroup::moveToByTrackPos(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveJointNB*/
void CLinkbotLGroup::moveJointNB(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJoint*/
void CLinkbotLGroup::moveJoint(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointForeverNB*/
void CLinkbotLGroup::moveJointForeverNB(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* moveJointToNB*/
void CLinkbotLGroup::moveJointToNB(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointTo*/
void CLinkbotLGroup::moveJointTo(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointToByTrackPosNB*/
void CLinkbotLGroup::moveJointToByTrackPosNB(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointToByTrackPos*/
void CLinkbotLGroup::moveJointToByTrackPos(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* setJointSpeed*/
void CLinkbotLGroup::setJointSpeed(robotJointId_t id, double speed) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_setJointSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, speed);
    return;
}

/* setJointSpeedRatio*/
void CLinkbotLGroup::setJointSpeedRatio(robotJointId_t id, double ratio) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_setJointSpeedRatio_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, ratio);
    return;
}

/* setJointSpeeds*/
void CLinkbotLGroup::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_setJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, speed1, speed2, speed3);
    return;
}

/* setJointSpeedRatios*/
void CLinkbotLGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_setJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, ratio1, ratio2, ratio3);
    return;
}

/* resetToZeroNB*/
void CLinkbotLGroup::resetToZeroNB() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_resetToZeroNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* resetToZero*/
void CLinkbotLGroup::resetToZero() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_resetToZero_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/*isMoving*/
int CLinkbotLGroup::isMoving() {
    void *fptr;
    int mask = 0x05; // only motors 1 and 2
    int retval;
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_isMoving_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &retval, NULL, this, mask);
    return retval;
}

/*isConnected*/
int CLinkbotLGroup::isConnected() {
    void *fptr;
    int retval;
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_isConnected_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

/* moveJointTime*/
void CLinkbotLGroup::moveJointTime(robotJointId_t id, double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, time);
    return;
}

/* moveJointTimeNB*/
void CLinkbotLGroup::moveJointTimeNB(robotJointId_t id, double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, time);
    return;
}

/* moveTime*/
void CLinkbotLGroup::moveTime(double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
    return;
}

/* moveTimeNB*/
void CLinkbotLGroup::moveTimeNB(double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
    return;
}

