/*chf function of the class Linbot for Ch binding*/

#include"linkbot.h"
#include<dlfcn.h>
#include<stdarg.h>
#include<array.h>

/* For deprecating functions in Ch*/
#define DEPRECATED(from, to) \
  fprintf(stdout, "Warning: The function \"%s()\" is deprecated. Please use \"%s()\"\n" , from, to)

/*class constructor*/
CLinkbotL::CLinkbotL(...) {
    void *fptr;
    va_list ap;
    const char* serialID;
    if (g_chlinkbot_dlhandle == NULL || g_chlinkbot_dlcount == 0) {
        g_chlinkbot_dlhandle = dlopen("liblinkbot.dl", RTLD_LAZY);
        if (g_chlinkbot_dlhandle == NULL) {
          printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
          return;
       }
    }
    
    va_start(ap, VA_NOARG);
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_CLinkbotL_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    if(va_count(ap) == 0) {
        dlrunfun(fptr, NULL, NULL);
    } else if (va_count(ap) == 1) {
        serialID = va_arg(ap, const char*);
        dlrunfun(fptr, NULL, NULL, serialID);
    }
    else {
        printf("Error, wrong number of arguments passed %d.\nExit..\n", va_count(ap));
        exit(-1);
    }
    //va_end(ap);
    g_chlinkbot_dlcount++;
    return;
}

/*class destructor*/  
CLinkbotL::~CLinkbotL() {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotL_dCLinkbotL_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    g_chlinkbot_dlcount--;
    
    if (g_chlinkbot_dlcount <= 0 && g_chlinkbot_dlhandle != NULL) 
       if (dlclose(g_chlinkbot_dlhandle) != 0)
          printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
}

/*MOVEMENT FUNCTIONS*/

/*Gripper functions*/
void CLinkbotL::openGripper(double angle)
{
    moveJoint(JOINT1, -angle);
}

void CLinkbotL::openGripperNB(double angle) {
    
    moveJointNB(JOINT1, -angle);
}

void CLinkbotL::closeGripper(void) {
    double gripperAngleOld= 0;
    double gripperAngleNew;

    getJointAngle(JOINT1, gripperAngleNew); // get the new position
    /* Close the gripper to grab an object */
    while(fabs(gripperAngleNew - gripperAngleOld) > 5) {
        gripperAngleOld = gripperAngleNew;    // update the old position
        getJointAngle(JOINT1, gripperAngleNew); // get the new position
		moveNB( 8, 0, 0); // move 8 degrees
        #ifndef _WIN32
        usleep(500000);
        #else
        Sleep(500);
        #endif
        getJointAngle(JOINT1, gripperAngleNew); // get the new position
    }
    moveNB(3, 0, 0);            // try to move another 8 degrees 
    #ifndef _WIN32
        usleep(2000000);
    #else
        Sleep(2000);
    #endif            // closing for 1 second              // closing for 1 second
    setMovementStateNB(ROBOT_HOLD, ROBOT_HOLD, ROBOT_HOLD); // hold the object
	stop();
	return;
}

/*END MOVEMENT FUNCTIONS*/
/*GET FUNCTIONS*/

/*END GET FUNCTIONS*/
/*SET FUNCTIONS*/

/*END SET FUNCTIONS*/
/*MISCELLANEOUS FUNCTIONS*/

/*END MISCELLANEOUS FUNCTIONS*/
/*ROBOSIM COMPATIBILITY FUNCTIONS*/
void CLinkbotL::getxy(double &x, double &y)
{
	printf("Warning: function getxy() not implemented on hardware robots\n");
	return;
}

void CLinkbotL::line(double x1, double y1, double z1, double x2, double y2, double z2, int linewidth, char *color)
{
	printf("Warning: function line()not implemented on hardware robots\n");
	return;
}

void CLinkbotL::point(double x, double y, double z, int pointsize, char *color)
{
	printf("Warning: function point()not implemented on hardware robots\n");
	return;
}

void CLinkbotL::text(double x, double y, double z, char *text)
{
	printf("Warning: function text() not implemented on hardware robots\n");
	return;
}

void CLinkbotL::traceOn(void)
{
	printf("Warning: function traceOn() not implemented on hardware robots\n");
	return;
}

void CLinkbotL::traceColor(char *color, int width)
{
	printf("Warning: function traceColor() not implemented on hardware robots\n");
	return;
}

void CLinkbotL::traceOff(void)
{
	printf("Warning: function traceOff() not implemented on hardware robots\n");
	return;
}

void CLinkbotL::recordxyBegin(robotRecordData_t &x, robotRecordData_t &y, double seconds, ...)
{
	printf("Warning: function recordxyBegin() not implemented on hardware robots\n");
	return;
}

void CLinkbotL::recordxyEnd(int &num)
{
	printf("Warning: function recordxyEnd() not implemented on hardware robots\n");
	return;
}

/*END ROBOSIM COMPATIBILITY FUNCTIONS*/

/*CLinkbotLGroup class */

/* Constructor */
CLinkbotLGroup::CLinkbotLGroup() {
    void *fptr;
    /* Here to load the dynamically loaded library if necessary.
     CLinkbotL::g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     CLinkbotL::g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
    
    if(CLinkbotL::g_chlinkbot_dlhandle == NULL || CLinkbotL::g_chlinkbot_dlcount == 0) {
        CLinkbotL::g_chlinkbot_dlhandle = dlopen("liblinkbot.dl", RTLD_LAZY);
        if(CLinkbotL::g_chlinkbot_dlhandle == NULL) {
          printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
          return;
        }
    }
    /* to get the address by function name */
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_CLinkbotLGroup_chdl");
    if(fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    /* to call the chdl function in dynamically loaded
     library by address */
     dlrunfun(fptr, NULL, NULL);
    CLinkbotL::g_chlinkbot_dlcount++; // to increase count of instance
}

/* Destructor */
CLinkbotLGroup::~CLinkbotLGroup() {
  void *fptr;
  fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_dCLinkbotLGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  CLinkbotL::g_chlinkbot_dlcount--; // to decrease count of instance
  if(CLinkbotL::g_chlinkbot_dlcount <= 0 && CLinkbotL::g_chlinkbot_dlhandle != NULL) {
    if(dlclose(CLinkbotL::g_chlinkbot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

/* addRobot*/
void CLinkbotLGroup::addRobot(CLinkbotL &robot) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_addRobot_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &robot);
    return;
}

/* connect*/
void CLinkbotLGroup::connect() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_connect_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveWait*/
void CLinkbotLGroup::moveWait() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveWait_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveJointWait*/
void CLinkbotLGroup::moveJointWait(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveWait_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* holdJoint*/
void CLinkbotLGroup::holdJoint(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_holdJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* holdJoints*/
void CLinkbotLGroup::holdJoints() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_holdJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}


/* holdJointsAtExit*/
void CLinkbotLGroup::holdJointsAtExit() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_holdJointsAtExit_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* relaxJoint*/
void CLinkbotLGroup::relaxJoint(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_relaxJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* relaxJoints*/
void CLinkbotLGroup::relaxJoints() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_relaxJoints_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* stop*/
void CLinkbotLGroup::stop() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_stop_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveNB*/
void CLinkbotLGroup::moveNB(double j1, double j2, double j3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
    return;
}

/* move*/
void CLinkbotLGroup::move(double j1, double j2, double j3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_move_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, j1, j2, j3);
    return;
}

/* moveForeverNB*/
void CLinkbotLGroup::moveForeverNB() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveToNB*/
void CLinkbotLGroup::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveTo*/
void CLinkbotLGroup::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveToZeroNB*/
void CLinkbotLGroup::moveToZeroNB() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveToZeroNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveToZero*/
void CLinkbotLGroup::moveToZero() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveToZero_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* moveToByTrackPosNB*/
void CLinkbotLGroup::moveToByTrackPosNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveToByTrackPos*/
void CLinkbotLGroup::moveToByTrackPos(double angle1, double angle2, double angle3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle1, angle2, angle3);
    return;
}

/* moveJointNB*/
void CLinkbotLGroup::moveJointNB(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJoint*/
void CLinkbotLGroup::moveJoint(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJoint_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointForeverNB*/
void CLinkbotLGroup::moveJointForeverNB(robotJointId_t id) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id);
    return;
}

/* moveJointToNB*/
void CLinkbotLGroup::moveJointToNB(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointToNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointTo*/
void CLinkbotLGroup::moveJointTo(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointTo_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointToByTrackPosNB*/
void CLinkbotLGroup::moveJointToByTrackPosNB(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointToByTrackPosNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* moveJointToByTrackPos*/
void CLinkbotLGroup::moveJointToByTrackPos(robotJointId_t id, double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointToByTrackPos_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, angle);
    return;
}

/* setJointSpeed*/
void CLinkbotLGroup::setJointSpeed(robotJointId_t id, double speed) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_setJointSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, speed);
    return;
}

/* setJointSpeedRatio*/
void CLinkbotLGroup::setJointSpeedRatio(robotJointId_t id, double ratio) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_setJointSpeedRatio_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, ratio);
    return;
}

/* setJointSpeeds*/
void CLinkbotLGroup::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_setJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, speed1, speed2, speed3);
    return;
}

/* setJointSpeedRatios*/
void CLinkbotLGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_setJointSpeeds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, ratio1, ratio2, ratio3);
    return;
}

/* setLEDColorRGB*/
void CLinkbotLGroup::setLEDColorRGB(int r, int g, int b) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_setLEDColorRGB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, r, g, b);
    return;
}

/* setLEDColor*/
void CLinkbotLGroup::setLEDColor(char* color) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_setLEDColor_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, color);
    return;
}

/* resetToZeroNB*/
void CLinkbotLGroup::resetToZeroNB() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_resetToZeroNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* resetToZero*/
void CLinkbotLGroup::resetToZero() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_resetToZero_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/*isMoving*/
int CLinkbotLGroup::isMoving() {
    void *fptr;
    int mask = 0x05; // only motors 1 and 2
    int retval;
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_isMoving_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &retval, NULL, this, mask);
    return retval;
}

/*isConnected*/
int CLinkbotLGroup::isConnected() {
    void *fptr;
    int retval;
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_isConnected_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return -1;
    }
     
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

/* moveJointTime*/
void CLinkbotLGroup::moveJointTime(robotJointId_t id, double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, time);
    return;
}

/* moveJointTimeNB*/
void CLinkbotLGroup::moveJointTimeNB(robotJointId_t id, double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveJointTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, id, time);
    return;
}

/* moveTime*/
void CLinkbotLGroup::moveTime(double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
    return;
}

/* moveTimeNB*/
void CLinkbotLGroup::moveTimeNB(double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_moveTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
    return;
}

/*ROBOSIM COMPATIBILITY FUNCTIONS*/
void CLinkbotLGroup::traceOn(void)
{
	printf("Warning: function traceOn() not implemented on hardware robots\n");
	return;
}

void CLinkbotLGroup::traceOff(void)
{
	printf("Warning: function traceOff() not implemented on hardware robots\n");
	return;
}
/*END ROBOSIM COMPATIBILITY FUNCTIONS*/

/* MISC FUNCTIONS */
void CLinkbotLGroup::delaySeconds(double seconds)
{
    void *fptr;

    fptr = dlsym(CLinkbotL::g_chlinkbot_dlhandle, "CLinkbotLGroup_delaySeconds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }

    dlrunfun(fptr, NULL, NULL, this, seconds);
}
