/*chf function of the class Linbot for Ch binding*/

#include"linkbot.h"
#include<dlfcn.h>
#include<array.h>
#include<stdio.h>
#include<stdarg.h>
#include<stdlib.h>

/* For deprecating functions in Ch*/
#define DEPRECATED(from, to) \
  fprintf(stdout, "Warning: The function \"%s()\" is deprecated. Please use \"%s()\"\n" , from, to)


/*class constructor*/
CLinkbotI::CLinkbotI(...) {
    void *fptr;
    va_list ap;
    const char* serialID;
    
    if (g_chlinkbot_dlhandle == NULL || g_chlinkbot_dlcount == 0) {
        g_chlinkbot_dlhandle = dlopen("liblinkbot.dl", RTLD_LAZY);
        if (g_chlinkbot_dlhandle == NULL) {
          printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
          return;
       }
    }
    
    va_start(ap, VA_NOARG);
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_CLinkbotI_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    
    if(va_count(ap) == 0) {
        dlrunfun(fptr, NULL, NULL);
    } else if (va_count(ap) == 1) {
        serialID = va_arg(ap, const char*);
        dlrunfun(fptr, NULL, NULL, serialID);
    }
    else {
        printf("Error, wrong number of arguments passed %d.\nExit..\n", va_count(ap));
        exit(-1);
    }
    //va_end(ap);
    g_chlinkbot_dlcount++;
    return;
}

/*class destructor*/  
CLinkbotI::~CLinkbotI() {
    void *fptr;
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_dCLinkbotI_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    
    dlrunfun(fptr, NULL, NULL, this);
    g_chlinkbot_dlcount--;
    
    if (g_chlinkbot_dlcount <= 0 && g_chlinkbot_dlhandle != NULL) 
       if (dlclose(g_chlinkbot_dlhandle) != 0)
          printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
}

/*MOVEMENT FUNCTIONS*/

/*driveAccelJointTimeNB*/
void CLinkbotI::driveAccelJointTimeNB(double radius, double acceleration, double
time) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAccelJointTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, radius, acceleration, time);
}

/*driveAccelToVelocityNB*/
void CLinkbotI::driveAccelToVelocityNB(double radius, double acceleration,
double velocity) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAccelToVelocityNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, radius, acceleration, velocity);
}

/*driveAccelToMaxSpeedNB*/
void CLinkbotI::driveAccelToMaxSpeedNB(double radius, double acceleration) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAccelToMaxSpeedNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, radius, acceleration);
}

/*driveAccelDistanceNB*/
void CLinkbotI::driveAccelDistanceNB(double radius, double acceleration, double
distance) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAccelDistanceNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, radius, acceleration, distance);
}

/*driveBackward*/
void CLinkbotI::driveBackward(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveBackward_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveBackwardNB*/
void CLinkbotI::driveBackwardNB(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveBackwardNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveForward*/
void CLinkbotI::driveForward(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveForward_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveForwardNB*/
void CLinkbotI::driveForwardNB(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveForwardNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveAngle*/
void CLinkbotI::driveAngle(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAngle_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveAngleNB*/
void CLinkbotI::driveAngleNB(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveAngleNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*driveDistance*/
void CLinkbotI::driveDistance(double distance, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveDistance_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, distance, radius);
}

/*driveDistanceNB*/
void CLinkbotI::driveDistanceNB(double distance, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveDistanceNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, distance, radius);
}

/*driveForeverNB*/
void CLinkbotI::driveForeverNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*driveTime*/
void CLinkbotI::driveTime(double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, seconds);
}

/*driveTimeNB*/
void CLinkbotI::driveTimeNB(double seconds) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_driveTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, seconds);
}

/*turnLeft*/
void CLinkbotI::turnLeft(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnLeft_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*turnLeftNB*/
void CLinkbotI::turnLeftNB(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnLeftNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*turnRight*/
void CLinkbotI::turnRight(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnRight_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*turnRightNB*/
void CLinkbotI::turnRightNB(double angle, double radius, double tracklength) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_turnRightNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
}

/*openGripper*/
void CLinkbotI::openGripper(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_openGripper_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*openGripperNB*/
void CLinkbotI::openGripperNB(double angle) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_openGripperNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
}

/*closeGripper*/
void CLinkbotI::closeGripper() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_closeGripper_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*closeGripperNB*/
void CLinkbotI::closeGripperNB() {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_closeGripperNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
}

/*END MOVEMENT FUNCTIONS*/
/*GET FUNCTIONS*/

/*getDistance*/
void CLinkbotI::getDistance(double &distance, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getDistance_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &distance, radius);
}

/*END GET FUNCTIONS*/
/*SET FUNCTIONS*/

/*setSpeed*/
void CLinkbotI::setSpeed(double speed, double radius) {
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_setSpeed_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, speed, radius);
}

/*END SET FUNCTIONS*/
/*MISCELLANEOUS FUNCTIONS*/

/*recordDistanceBegin*/
void CLinkbotI::recordDistanceBegin(double* &time, double* &distance, double radius, double seconds) {
    void *fptr;
    va_list ap, ap1;
    int shiftData = 1;
    int id = 1;
    
    va_start(ap, seconds);

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_recordDistanceBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    
    dlrunfun(fptr, NULL, NULL, this, id, &time, &distance, radius, seconds, shiftData);
    
    va_end(ap);
}
/*recordDistanceEnd*/
void CLinkbotI::recordDistanceEnd(int &num) {
    void *fptr;
    int id = 1;

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_recordDistanceEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this, id, &num);
}
/*recordDistanceOffset*/
void CLinkbotI::recordDistanceOffset(double distance) {
    void *fptr;

    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbot_recordDistanceOffset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return;
    }
    dlrunfun(fptr, NULL, NULL, this, distance);
}

/*END MISCELLANEOUS FUNCTIONS*/

/* Extra Position Functions */
void CLinkbotI::initPosition(double x, double y, double angle)
{
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_initPosition_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, x, y, angle);
}

/*ROBOSIM COMPATIBILITY FUNCTIONS*/
void CLinkbotI::getPosition(double &x, double &y, double &angle)
{
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getPosition_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &x, &y, &angle);
}

void CLinkbotI::getxy(double &x, double &y)
{
    void *fptr;
  
    fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_getxy_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, &x, &y);
		return;
}

void CLinkbotI::line(double x1, double y1, double z1, double x2, double y2, double z2, int linewidth, char *color)
{
	printf("Warning: function line()not implemented on hardware robots\n");
	return;
}

void CLinkbotI::drivexy(double x, double y, double radius, double trackwidth)
{
	void *fptr;

	fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_drivexy_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this, x, y, radius, trackwidth, 0);

	return;
}

void CLinkbotI::drivexyNB(double x, double y, double radius, double trackwidth)
{
	void *fptr;

	fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_drivexy_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this, x, y, radius, trackwidth, 1);

	return;
}

void CLinkbotI::drivexyTo(double x, double y, double radius, double trackwidth)
{
	void *fptr;

	fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_drivexyTo_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this, x, y, radius, trackwidth, 0);
	return;
}

void CLinkbotI::drivexyToNB(double x, double y, double radius, double trackwidth)
{
	void *fptr;

	fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_drivexyTo_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this, x, y, radius, trackwidth, 1);

	return;
}

void CLinkbotI::drivexyToExpr(double x0, double xf, int n, char *expr, double radius, double trackwidth)
{
	// number of steps necessary
	double step = (xf-x0)/(n-1);

	// arrays to hold data
	double *px = new double[n];
	double *py = new double[n];
	if (px == NULL || py == NULL) {
		fprintf(_stderr, "Error: drivexyToExpr() memory allocation failed.\n");
		return;
	}

	// drivexy to sequence of (x,y) values
	int i = 0;
	for (i = 0; i < n; i++) {
		px[i] = x0 + i*step;
		double x = px[i];   // streval() needs an x value
		py[i] = streval(expr);
	}

	void *fptr;

	fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_drivexyToArray_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return;
	}

	dlrunfun(fptr, NULL, NULL, this, px, py, n, radius, trackwidth, 0);

	return;
}

void CLinkbotI::drivexyToExprNB(double x0, double xf, int n, char *expr, double radius, double trackwidth)
{
	// number of steps necessary
	double step = (xf-x0)/(n-1);

	// arrays to hold data
	double *px = new double[n];
	double *py = new double[n];
	if (px == NULL || py == NULL) {
		fprintf(_stderr, "Error: drivexyToExpr() memory allocation failed.\n");
		return;
	}

	// drivexy to sequence of (x,y) values
	int i = 0;
	for (i = 0; i < n; i++) {
		px[i] = x0 + i*step;
		double x = px[i];   // streval() needs an x value
		py[i] = streval(expr);
	}

	void *fptr;

	fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_drivexyToArray_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return;
	}

	dlrunfun(fptr, NULL, NULL, this, px, py, n, radius, trackwidth, 1);

	return;
}

void CLinkbotI::drivexyToFunc(double x0, double xf, int n, double (*func)(double x), double radius, double trackwidth)
{
	// number of steps necessary
	double step = (xf-x0)/(n-1);

	// arrays to hold data
	double *px = new double[n];
	double *py = new double[n];
	if (px == NULL || py == NULL) {
		fprintf(_stderr, "Error: drivexyToExpr() memory allocation failed.\n");
		return;
	}

	// drivexy to sequence of (x,y) values
	int i = 0;
	for (i = 0; i < n; i++) {
		px[i] = x0 + i*step;
		py[i] = func(px[i]);
	}

	void *fptr;

	fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_drivexyToArray_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return;
	}

	dlrunfun(fptr, NULL, NULL, this, px, py, n, radius, trackwidth, 0);
	return;
}

void CLinkbotI::drivexyToFuncNB(double x0, double xf, int n, double (*func)(double x), double radius, double trackwidth)
{
	// number of steps necessary
	double step = (xf-x0)/(n-1);

	// arrays to hold data
	double *px = new double[n];
	double *py = new double[n];
	if (px == NULL || py == NULL) {
		fprintf(_stderr, "Error: drivexyToExpr() memory allocation failed.\n");
		return;
	}

	// drivexy to sequence of (x,y) values
	int i = 0;
	for (i = 0; i < n; i++) {
		px[i] = x0 + i*step;
		py[i] = func(px[i]);
	}

	void *fptr;

	fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_drivexyToArray_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return;
	}

	dlrunfun(fptr, NULL, NULL, this, px, py, n, radius, trackwidth, 1);
	return;
}

void CLinkbotI::drivexyWait(void)
{
	void *fptr;

	fptr = dlsym(g_chlinkbot_dlhandle, "CLinkbotI_drivexyWait_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return;
	}

	dlrunfun(fptr, NULL, drivexyWait, this);
	return;
}

void CLinkbotI::point(double x, double y, double z, int pointsize, char *color)
{
	printf("Warning: function point()not implemented on hardware robots\n");
	return;
}

void CLinkbotI::text(double x, double y, double z, char *text)
{
	printf("Warning: function text() not implemented on hardware robots\n");
	return;
}

void CLinkbotI::traceOn(void)
{
	printf("Warning: function traceOn() not implemented on hardware robots\n");
	return;
}

void CLinkbotI::traceColor(char *color, int width)
{
	printf("Warning: function traceColor() not implemented on hardware robots\n");
	return;
}

void CLinkbotI::traceOff(void)
{
	printf("Warning: function traceOff() not implemented on hardware robots\n");
	return;
}

void CLinkbotI::recordxyBegin(robotRecordData_t &x, robotRecordData_t &y, double seconds, ...)
{
	printf("Warning: function recordxyBegin() not implemented on hardware robots\n");
	return;
}

void CLinkbotI::recordxyEnd(int &num)
{
	printf("Warning: function recordxyEnd() not implemented on hardware robots\n");
	return;
}
/*END ROBOSIM COMPATIBILITY FUNCTIONS*/

/*CLinkbotIGroup class */

/* Constructor */
CLinkbotIGroup::CLinkbotIGroup() {
    void *fptr;
    /* Here to load the dynamically loaded library if necessary.
     CLinkbotI::g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     CLinkbotI::g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
    
    if(CLinkbotI::g_chlinkbot_dlhandle == NULL || CLinkbotI::g_chlinkbot_dlcount == 0) {
        CLinkbotI::g_chlinkbot_dlhandle = dlopen("liblinkbot.dl", RTLD_LAZY);
        if(CLinkbotI::g_chlinkbot_dlhandle == NULL) {
          printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
          return;
        }
    }
    /* to get the address by function name */
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_CLinkbotIGroup_chdl");
    if(fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
    /* to call the chdl function in dynamically loaded
     library by address */
     dlrunfun(fptr, NULL, NULL);
    CLinkbotI::g_chlinkbot_dlcount++; // to increase count of instance
}

/* Destructor */
CLinkbotIGroup::~CLinkbotIGroup() {
  void *fptr;
  fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_dCLinkbotIGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  CLinkbotI::g_chlinkbot_dlcount--; // to decrease count of instance
  if(CLinkbotI::g_chlinkbot_dlcount <= 0 && CLinkbotI::g_chlinkbot_dlhandle != NULL) {
    if(dlclose(CLinkbotI::g_chlinkbot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

/* driveDistanceNB*/
void CLinkbotIGroup::driveDistanceNB(double distance, double radius) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveDistanceNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, distance, radius);
    return;
}
/* driveDistance*/
void CLinkbotIGroup::driveDistance(double distance, double radius) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveDistance_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, distance, radius);
    return;
}

/* driveBackwardNB*/
void CLinkbotIGroup::driveBackwardNB(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveBackwardNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveBackward*/
void CLinkbotIGroup::driveBackward(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveBackward_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveForwardNB*/
void CLinkbotIGroup::driveForwardNB(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveForwardNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveForward*/
void CLinkbotIGroup::driveForward(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveForward_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveAngle*/
void CLinkbotIGroup::driveAngle(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveAngle_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveAngleNB*/
void CLinkbotIGroup::driveAngleNB(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveAngleNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* driveTimeNB*/
void CLinkbotIGroup::driveTimeNB(double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveTimeNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
    return;
}

/* driveTime*/
void CLinkbotIGroup::driveTime(double time) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveTime_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, time);
    return;
}

/* driveForeverNB*/
void CLinkbotIGroup::driveForeverNB() {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_driveForeverNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* turnLeftNB*/
void CLinkbotIGroup::turnLeftNB(double angle, double radius, double tracklength) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_turnLeftNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
    return;
}

/* turnLeft*/
void CLinkbotIGroup::turnLeft(double angle, double radius, double tracklength) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_turnLeft_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
    return;
}

/* turnRightNB*/
void CLinkbotIGroup::turnRightNB(double angle, double radius, double tracklength) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_turnRightNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
    return;
}

/* turnRight*/
void CLinkbotIGroup::turnRight(double angle, double radius, double tracklength) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_turnRight_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle, radius, tracklength);
    return;
}

/* openGripperNB*/
void CLinkbotIGroup::openGripperNB(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_openGripperNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/* openGripper*/
void CLinkbotIGroup::openGripper(double angle) {
    void *fptr;
    int rc;
  
    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_openGripper_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this, angle);
    return;
}

/*closeGripperNB*/
void CLinkbotIGroup::closeGripperNB() {
    void *fptr;

    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_closeGripperNB_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/*closeGripper*/
void CLinkbotIGroup::closeGripper() {
    void *fptr;

    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_closeGripper_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }
     
    dlrunfun(fptr, NULL, NULL, this);
    return;
}

/* ROBOSIM COMPATIBILITY FUNCTIONS*/
void CLinkbotIGroup::traceOn(void)
{
	printf("Warning: function traceOn() not implemented on hardware robots\n");
	return;
}

void CLinkbotIGroup::traceOff(void)
{
	printf("Warning: function traceOff() not implemented on hardware robots\n");
	return;
}
/* END ROBOSIM COMPATIBILITY FUNCTIONS*/

/* MISC FUNCTIONS */
void CLinkbotIGroup::delaySeconds(double seconds)
{
    void *fptr;

    fptr = dlsym(CLinkbotI::g_chlinkbot_dlhandle, "CLinkbotIGroup_delaySeconds_chdl");
    if (fptr == NULL) {
       printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
       return;
    }

    dlrunfun(fptr, NULL, NULL, this, seconds);
}
